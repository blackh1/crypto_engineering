# Montgomery Multiplication

bitWidth = 2048
p = 155936966210288782688846781840319115578125508099006176691674756101199396906452884150844857789419977272562456818886836623603345794844537662891377991236171806898476796579621862888284021301694820784488501940349341442556828928868106795258037235977504776563827278753623647934096670816990271745436828336715309116829
q = 154550027540448951684922233285968300983453489115125809347723866558261713071327514794678292279993060054918642408826549213583589948422939720569023993137492200249075578144606259836461098214774844004861497427463933897274746666393948203071146784053905517446766484066695771981475576893200899521298200494727732738651
N = p * q
R = 2 ** bitWidth
Rmod = R - 1


def findModInverse(x, y):
    u1, u2, u3 = 1, 0, x
    v1, v2, v3 = 0, 1, y
    while v3 != 0:
        tmp = u3 // v3
        v1, v2, v3, u1, u2, u3 = (u1 - tmp * v1), (u2 - tmp * v2), (u3 - tmp * v3), v1, v2, v3
    return u1 % y


def calNprime(N, R):
    Ninv = findModInverse(N, R)
    return -Ninv % R


Nprime = calNprime(N, R)
Rinv = findModInverse(R, N)


def montRedc(T):
    U = ((T & Rmod) * Nprime) & Rmod
    res = (T + U * N) >> bitWidth
    if res >= N:
        res -= N
    return res


def montMult(_a, _b):
    return montRedc(_a * _b)


if __name__ == '__main__':
    a = 177280045195364564698516514796118093031280229259311020341099214877762597350211102964304228992070775581738606697857567728195072951945795970694884072173575996757956182731064682841462780013590148914220680848432841147958740832638467382565068326511738609580170159384774237233047044762393727919980741741515015528563
    b = 152045720885084761097392355446378053191487343679091727191354804578680520112942408713918851923355069098531431918304369715636658245184095036875454896802735631389690293269855102102186804160188145602836916073197620360462223914713681488493668342999792654793979516935726329564843816601660597963123210165171015284651
    _a = a * R % N
    _b = b * R % N
    print('The result of plain method:', a * b % N, sep='\n')
    print('The result of Montgomery Multiplication:', montMult(_a, _b) * Rinv % N, sep='\n')

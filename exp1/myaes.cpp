#include "myaes.h"
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <cstdint>
using namespace std;

static const uint8_t SBox[256] = {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

static const uint8_t iSBox[256] = {
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

static const uint32_t RCon[10] = {
	0x00000001, 0x00000002, 0x00000004, 0x00000008, 0x00000010,
	0x00000020, 0x00000040, 0x00000080, 0x0000001B, 0x00000036
};

/*
void debug(void* p, int len) {
	uint8_t* c = (uint8_t*)p;
	for (int i = 0; i < len; i++) printf("%02x ", c[i]);
	puts("");
}
*/

namespace MYAES {

	inline uint32_t SubWord(uint32_t w) {
		return (SBox[w >> 24] << 24) | (SBox[uint8_t(w >> 16)] << 16) | (SBox[uint8_t(w >> 8)] << 8) | (SBox[(uint8_t)w]);
	}

	inline uint32_t iSubWord(uint32_t w) {
		return (iSBox[w >> 24] << 24) | (iSBox[uint8_t(w >> 16)] << 16) | (iSBox[uint8_t(w >> 8)] << 8) | (iSBox[(uint8_t)w]);
	}

	inline uint32_t RotWord(uint32_t x) {
		return (x << 24) | (x >> 8);
	}

	void Gen_round_key(uint32_t* k0, uint32_t* k1, int round) {
		k1[0] = SubWord(RotWord(k0[3])) ^ RCon[round] ^ k0[0];
		k1[1] = k0[1] ^ k1[0];
		k1[2] = k0[2] ^ k1[1];
		k1[3] = k0[3] ^ k1[2];
	}

	int AES128_set_encrypt_key(const unsigned char* userKey, AES_KEY_128* key) {
		if (!userKey || !key) return -1;

		memcpy(key->rd_key, userKey, 16);
		Gen_round_key(key->rd_key, key->rd_key + 4, 0);
		Gen_round_key(key->rd_key + 4, key->rd_key + 8, 1);
		Gen_round_key(key->rd_key + 8, key->rd_key + 12, 2);
		Gen_round_key(key->rd_key + 12, key->rd_key + 16, 3);
		Gen_round_key(key->rd_key + 16, key->rd_key + 20, 4);
		Gen_round_key(key->rd_key + 20, key->rd_key + 24, 5);
		Gen_round_key(key->rd_key + 24, key->rd_key + 28, 6);
		Gen_round_key(key->rd_key + 28, key->rd_key + 32, 7);
		Gen_round_key(key->rd_key + 32, key->rd_key + 36, 8);
		Gen_round_key(key->rd_key + 36, key->rd_key + 40, 9);
		return 0;
	}

	int AES128_set_decrypt_key(const unsigned char* userKey, AES_KEY_128* key) {
		AES_KEY_128 enc_key;
		if (AES128_set_encrypt_key(userKey, &enc_key) == -1) return -1;
		for (int i = 0; i < 11; i++)
			memcpy(key->rd_key + i * 4, enc_key.rd_key + (40 - i * 4), 16);
		return 0;
	}

	/* --------------- tool -------------- */

	inline uint8_t Mul2(uint8_t x) {
		return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
	}
	uint8_t Mul3(uint8_t x) {
		return Mul2(x) ^ x;
	}
	uint8_t Mul4(uint8_t x) {
		return Mul2(Mul2(x));
	}
	uint8_t Mul8(uint8_t x) {
		return Mul4(Mul2(x));
	}
	uint8_t Mul9(uint8_t x) {
		return Mul8(x) ^ x;
	}
	uint8_t Mulb(uint8_t x) {
		return Mul8(x) ^ Mul2(x) ^ x;
	}
	uint8_t Muld(uint8_t x) {
		return Mul8(x) ^ Mul4(x) ^ x;
	}
	uint8_t Mule(uint8_t x) {
		return Mul8(x) ^ Mul4(x) ^ Mul2(x);
	}

	/* --------------- encrypt -------------- */

	void AES128_encrypt(const uint8_t* in, uint8_t* out, const AES_KEY_128* key) {
		uint32_t m[4], temp[4];
		memcpy(m, in, 16);

		//	add round key
		m[0] ^= key->rd_key[0], m[1] ^= key->rd_key[1], m[2] ^= key->rd_key[2], m[3] ^= key->rd_key[3];

		for (int round = 1; round < 10; round++) {
			m[0] = SubWord(m[0]), m[1] = SubWord(m[1]), m[2] = SubWord(m[2]), m[3] = SubWord(m[3]);

			//	shift row
			for (int i = 0; i < 4; i++)
				temp[i] = m[i % 4] & 0x000000FF | m[(i + 1) % 4] & 0x0000FF00 | m[(i + 2) % 4] & 0x00FF0000 | m[(i + 3) % 4] & 0xFF000000;
			for (int i = 0; i < 4; i++)
				m[i] = temp[i];

			//	mix_columns
			for (int i = 0; i < 4; i++) {
				uint32_t s1, s2, s3, s4;
				s1 = Mul2(m[i] & 0xFF) ^ Mul3((m[i] >> 8) & 0xFF) ^ ((m[i] >> 16) & 0xFF) ^ ((m[i] >> 24) & 0xFF);
				s2 = (m[i] & 0xFF) ^ Mul2((m[i] >> 8) & 0xFF) ^ Mul3((m[i] >> 16) & 0xFF) ^ ((m[i] >> 24) & 0xFF);
				s3 = (m[i] & 0xFF) ^ ((m[i] >> 8) & 0xFF) ^ Mul2((m[i] >> 16) & 0xFF) ^ Mul3((m[i] >> 24) & 0xFF);
				s4 = Mul3(m[i] & 0xFF) ^ ((m[i] >> 8) & 0xFF) ^ ((m[i] >> 16) & 0xFF) ^ Mul2((m[i] >> 24) & 0xFF);
				temp[i] = s1 | (s2 << 8) | (s3 << 16) | (s4 << 24);
			}
			for (int i = 0; i < 4; i++)
				m[i] = temp[i];

			//	add round key
			m[0] ^= key->rd_key[4 * round], m[1] ^= key->rd_key[4 * round + 1], m[2] ^= key->rd_key[4 * round + 2], m[3] ^= key->rd_key[4 * round + 3];
		}
		// Last round
		m[0] = SubWord(m[0]), m[1] = SubWord(m[1]), m[2] = SubWord(m[2]), m[3] = SubWord(m[3]);

		for (int i = 0; i < 4; i++)
			temp[i] = m[i % 4] & 0x000000FF | m[(i + 1) % 4] & 0x0000FF00 | m[(i + 2) % 4] & 0x00FF0000 | m[(i + 3) % 4] & 0xFF000000;
		for (int i = 0; i < 4; i++)
			m[i] = temp[i];

		m[0] ^= key->rd_key[40], m[1] ^= key->rd_key[41], m[2] ^= key->rd_key[42], m[3] ^= key->rd_key[43];

		memcpy(out, m, 16);
	}


	/* --------------- Decrypt -------------- */

	void AES128_decrypt(const uint8_t* in, uint8_t* out, const AES_KEY_128* key) {
		uint32_t m[4], temp[4];
		memcpy(m, in, 16);

		//	Add round key
		m[0] ^= key->rd_key[0], m[1] ^= key->rd_key[1], m[2] ^= key->rd_key[2], m[3] ^= key->rd_key[3];

		for (int round = 1; round < 10; round++) {
			//	inverse shift rows
			for (int i = 0; i < 4; i++)
				temp[i] = m[i % 4] & 0x000000FF | m[(i + 3) % 4] & 0x0000FF00 | m[(i + 2) % 4] & 0x00FF0000 | m[(i + 1) % 4] & 0xFF000000;
			for (int i = 0; i < 4; i++)
				m[i] = temp[i];

			//	inverse sub bytes	
			m[0] = iSubWord(m[0]), m[1] = iSubWord(m[1]), m[2] = iSubWord(m[2]), m[3] = iSubWord(m[3]);

			//	add round key
			m[0] ^= key->rd_key[4 * round], m[1] ^= key->rd_key[4 * round + 1], m[2] ^= key->rd_key[4 * round + 2], m[3] ^= key->rd_key[4 * round + 3];

			//	inverse mix columns
			for (int i = 0; i < 4; i++) {
				uint32_t s1, s2, s3, s4;
				s1 = Mule(m[i] & 0xFF) ^ Mulb((m[i] >> 8) & 0xFF) ^ Muld((m[i] >> 16) & 0xFF) ^ Mul9((m[i] >> 24) & 0xFF);
				s2 = Mul9(m[i] & 0xFF) ^ Mule((m[i] >> 8) & 0xFF) ^ Mulb((m[i] >> 16) & 0xFF) ^ Muld((m[i] >> 24) & 0xFF);
				s3 = Muld(m[i] & 0xFF) ^ Mul9((m[i] >> 8) & 0xFF) ^ Mule((m[i] >> 16) & 0xFF) ^ Mulb((m[i] >> 24) & 0xFF);
				s4 = Mulb(m[i] & 0xFF) ^ Muld((m[i] >> 8) & 0xFF) ^ Mul9((m[i] >> 16) & 0xFF) ^ Mule((m[i] >> 24) & 0xFF);
				temp[i] = s1 | (s2 << 8) | (s3 << 16) | (s4 << 24);
			}
			for (int i = 0; i < 4; i++)
				m[i] = temp[i];
		}

		for (int i = 0; i < 4; i++)
			temp[i] = m[i % 4] & 0x000000FF | m[(i + 3) % 4] & 0x0000FF00 | m[(i + 2) % 4] & 0x00FF0000 | m[(i + 1) % 4] & 0xFF000000;
		for (int i = 0; i < 4; i++)
			m[i] = temp[i];

		m[0] = iSubWord(m[0]), m[1] = iSubWord(m[1]), m[2] = iSubWord(m[2]), m[3] = iSubWord(m[3]);
		m[0] ^= key->rd_key[40], m[1] ^= key->rd_key[41], m[2] ^= key->rd_key[42], m[3] ^= key->rd_key[43];

		memcpy(out, m, 16);
	}
}


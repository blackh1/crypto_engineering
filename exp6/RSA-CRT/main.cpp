#include "BigInt.h"
#include <iostream>
#include <chrono>

using namespace std;

BigInt qpow(BigInt a, BigInt b, BigInt mod)
{
    int cnt = 0;
    BigInt ans(1);
    a = a % mod;
    while (!b.isZero()) {
        if (b.isOdd()) ans = ((ans * a) % mod);
        b = b / 2;
        a = ((a * a) % mod);
    }
    return ans;
}

void exgcd(BigInt a, BigInt b, BigInt& x, BigInt& y) {
    if (b.isZero()) x = 1ll, y = 0ll;
    else exgcd(b, a % b, y, x), y -= x * (a / b);
}

BigInt inverse(BigInt a, BigInt n) {
    BigInt x, y;
    exgcd(a, n, x, y);
    return (x % n + n) % n;
}


int main() {
/*    BigInt m("7727415897340456763"),
           c("4992705377087463893"),
           n("9527596560322906469"),
           p("3738662827"),
           q("2548396847"),
           e("9015954858686560229"),
           d("1365546831951993401");    */

    BigInt m("84238584449484039365086272731076487903308214764879678629249298065444600365973452751754148227900103738039598610619140724738600791195861511543622240988016554867294131301742743020791785961349883023865526597226484837143337963276126670443320586521487621583544919082983635017007066573307140166515954157875108817082"),
           c("58710565971664131617414175127588299633334390736044615811164639139862216298209082094934559212033785181202864104254194415036227570875196958720947469786499173018967127589195095749936271508199819663543371569464506086502295642656707610437104513504030825694537138955752125814293571972076843699241814500780372738368"),
           n("96188280267628056504829304573453858811873097127519644682687199328689680063354910524043380112370809635908025474415843681081183863403661754803213111402855059311783925799457595585611931111672457922855969670363294546286394466123514770596187454148269435999593939666846471051871410443811627585030781077443922849469"),
           p("10506627070289434892038694761692730729761969305415154654625317360199745268994784267442256556335846004344150355312579555371155764014161670501627894001459919"),
           q("9155010416199941990841343183467451779297727840632925032272637047732183751167371014435075150646416905746683604222783843218309709871358566141362289155254451"),
           e("87635084014323044423964488019139404913511873134971757056272608113706271946448916229553382254372263542827088389736764531858389446093265497970726793376208797808798883926626190218625543450037100510042494665134530782335728591728752669813632851661541931549657803967581619377692750470625508349562661505432842521999"),
           d("33203271866070617033040241125749288582865018920749546769373255508501201752614753885917480055952978372988977247011392489293246180871553198464937142447563905203671181462225044179904875611486428382496676844349979604786782023689157896180720055459730902104441542517594348835292272455266800095639583251854703495099");
    
    /*  plain RSA  */
    auto begin = chrono::high_resolution_clock::now();
    for (int i = 0; i < 1; i++) m = qpow(c, d, n);
    auto end = chrono::high_resolution_clock::now();

    auto elapsed = chrono::duration_cast<chrono::nanoseconds>(end - begin);
    printf("Time measured: %.5f seconds.\n", elapsed.count() * 1e-9);
    cout << "accelerated RSA decryption m = " << m << '\n';

    /*  accelerated RSA  */
    // precompute
    BigInt d1 = d % (p - 1), d2 = d % (q - 1);
    BigInt inv = inverse(p, q);

    begin = chrono::high_resolution_clock::now();
    for (int i = 0; i < 1; i++) {
        BigInt m1 = qpow(c, d1, p);
        BigInt m2 = qpow(c, d2, q);
        m = m1 + ((m2 - m1) * inv % q) * p;
    }
    end = chrono::high_resolution_clock::now();

    elapsed = chrono::duration_cast<chrono::nanoseconds>(end - begin);
    printf("Time measured: %.5f seconds.\n", elapsed.count() * 1e-9);
    cout << "accelerated RSA decryption m = " << m << '\n';

    return 0;
}
